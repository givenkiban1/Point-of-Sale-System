unit payments;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Grids, DBGrids, pngimage, ExtCtrls, ComCtrls, TabNotBk, dbConn_u,
  StdCtrls, DB, ADODB, userAcc;

type
  TForm23 = class(TForm)
    TabbedNotebook1: TTabbedNotebook;
    Panel2: TPanel;
    Panel3: TPanel;
    Panel1: TPanel;
    Image1: TImage;
    Panel4: TPanel;
    Panel5: TPanel;
    Panel6: TPanel;
    Panel7: TPanel;
    DBGrid2: TDBGrid;
    DBGrid3: TDBGrid;
    Button1: TButton;
    Label1: TLabel;
    ADOTable1: TADOTable;
    DataSource1: TDataSource;
    ADOQuery1: TADOQuery;
    DataSource2: TDataSource;
    DBGrid1: TDBGrid;
    ADOTable2: TADOTable;
    Label2: TLabel;
    Button2: TButton;
    Button3: TButton;
    ADOQuery2: TADOQuery;
    Label3: TLabel;
    ADOQuery3: TADOQuery;
    ADOQuery4: TADOQuery;
    ADOTable3: TADOTable;
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Image1Click(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);

  private
    { Private declarations }
    procedure updateForm;
    procedure dispAll;
  public
    { Public declarations }
    Account: TAccount;
    function calcTotalHours : Real;
    function calcHours(x : Boolean) : Real;
    procedure payAll ;
  end;

var
  Form23: TForm23;

implementation

uses Unit17;
{$R *.dfm}

procedure TForm23.Button1Click(Sender: TObject);
var
  ans: string;
  d: TDate;
  r: String;
  pay, ratePay: real;
  h,m,s,ms,h1,m1,s1,ms1,x: word;
  hours : real;
  ansB : Boolean;
begin
            //dhbdhbd
            //to do first
            //Add option where u only pay employees if that day
            //has passed
            //also, automatically set total sales to 0 for the days that have
            //been missed... when program starts.
            //lastly, add customers page, finish the pay taxes and ordering stock from
            //suppliers
            //and custommers can apply for jobs, and view their own dashboard for
            //notifications such as job openings, sales, etc...
  ans := ADOTable1['EmployeeID'];

  ADOTable2.Close;
  ADOTable2.TableName := 'tblEmployees';
  ADOTable2.Open;

  if ADOTable2.Locate('EmployeeID', ans, [loCaseInsensitive,loPartialKey]) then
    begin

      ratePay := ADOTable2['HourlyWage'];

      ADOTable2.Close;
      ADOTable2.TableName := 'tblAttendance';
      ADOTable2.Open;

      ADOTable2.Filtered := False;
      ADOTable2.Filter := 'PAID = False AND DateOfDay = #'+ DateToStr(ADOTable1['DateOfDay']) +
        '# AND EmployeeID = '+QuotedStr(ans)+ ' AND ClockOutTime <> Null';
      ADOTable2.Filtered := True;
      //add input box asking user to choose wether | pay all , pay for day, single pay
      ansB := False;
      if ADOTable2.RecordCount>1 then
        begin
          if MessageDlg('Do you wish to Pay employee for all '+ sLineBreak+
            'other logins on this same Date : '+ DateToStr(ADOTable1['DateOfDay']),
             mtInformation , [mbYes, mbNo], 0) =6 then
              begin
                hours := calcTotalHours;
                ansB := True;
              end
              else hours := calcHours(False);
        end
      else hours := calcHours(False);

      pay := ratePay * hours;

      if MessageDlg('YOU ARE ABOUT TO PAY EMPLOYEE '+ans+ sLineBreak+
      FloatToStrF(Pay, ffCurrency, 7, 0)+' for working on '+DateToStr(ADOTable1['DateOfDay']) + slinebreak+
      ' for '+ Format('%.2f',[hours]) + ' hour(s).' + sLineBreak+

      'Do you wish to Continue ?', mtConfirmation, [mbYes, mbNo], 0) = 6 then
        begin
          //update tblTransactions

          ADOTable2.Close;

          ADOTable2.Filter := '';

          ADOTable2.TableName := 'tblTransactions';
          ADOTable2.Open;

          ADOTable2.Insert;

          ADOTable2['Type'] := 'WAGES';
          ADOTable2['By'] := Account.getEmployeeID;
          ADOTable2['To'] := ans;
          ADOTable2['Amount'] := pay;

          ADOTable2.Post;


          //update tblTransactions

          if ansB then
          begin
            ADOTable2.Close;
            ADOTable2.TableName := 'tblAttendance';
            ADOTable2.Open;

            ADOTable2.Filtered := False;
            ADOTable2.Filter := 'PAID = False AND DateOfDay = #'+ DateToStr(ADOTable1['DateOfDay']) +
              '# AND EmployeeID = '+QuotedStr(ans) + ' AND ClockOutTime <> Null';
            ADOTable2.Filtered := True;
            ShowMessage(IntToStr(ADOTable2.RecordCount));
            ADOTable1.Close;
            payAll;
          end
        else
          begin
            ADOTable1.Edit;
            ADOTable1['PAID'] := True;
            ADOTable1.Post;
          end;

          updateForm;

        end;
    end
  else ShowMessage('Error, The EmployeeID is no longer registered or may have not existed. Please Contact the Admin.');

  ADOTable2.Close;
  ADOTable2.Filter := '';
  ADOTable2.Filtered := False;


end;

procedure TForm23.Button2Click(Sender: TObject);
var noRecord : integer;
begin
ADOTable3.Close;
ADOTable3.TableName := 'tblTransactions';
ADOTable3.Open;

noRecord:= ADOTable3.RecordCount;

ADOTable3.Insert;
ADOTable3['TYPE'] := 'TAXES';
ADOTable3['BY'] := Account.getEmployeeID;
ADOTable3['TO'] := 'SARS';
ADOTable3['Amount'] := ADOQuery2['totalAmount']* 0.14;
ADOTable3['RefID'] := ADOQuery2['SaleIndex'];
ADOTable3.Post;

if ADOTable3.RecordCount > noRecord then
  begin
    ADOQuery4.Close;
    ADOQuery4.SQL.Text := 'UPDATE tblSales SET TaxPaidFor = True Where SaleIndex = '+IntToStr(ADOQuery2['SaleIndex']);
    if ADOQuery4.ExecSQL>0 then
      ShowMessage('Tax paid successfully ')
    else
      begin
        ShowMessage('Error has been encountered. please contact the IT Team or try again later. ');
        ADOTable3.Connection.RollbackTrans;
      end;
  end
else ShowMessage('We have encountered a problem. please try again later.');

updateForm;
end;

procedure TForm23.Button3Click(Sender: TObject);
var noRecord : integer;
begin

ADOQuery2.First;
ADOTable3.Close;
ADOTable3.TableName := 'tblTransactions';
ADOTable3.Open;

while not ADOQuery2.Eof do
  begin
    noRecord:= ADOTable3.RecordCount;

    ADOTable3.Insert;
    ADOTable3['TYPE'] := 'TAXES';
    ADOTable3['BY'] := Account.getEmployeeID;
    ADOTable3['TO'] := 'SARS';
    ADOTable3['Amount'] := ADOQuery2['totalAmount']* 0.14;
    ADOTable3['RefID'] := ADOQuery2['SaleIndex'];
    ADOTable3.Post;

    if ADOTable3.RecordCount > noRecord then
      begin
        ADOQuery4.Close;
        ADOQuery4.SQL.Text := 'UPDATE tblSales SET TaxPaidFor = True Where SaleIndex = '+IntToStr(ADOQuery2['SaleIndex']);
        if ADOQuery4.ExecSQL<=0 then
          begin
            ShowMessage('Error has been encountered. please contact the IT Team or try again later. ');
            ADOTable3.Connection.RollbackTrans;
          end;
      end
    else
      begin
        ShowMessage('We have encountered a problem. please try again later.');

      end;
    ADOQuery2.Next;
  end;
ShowMessage('Tax paid successfully ');
updateForm;

end;

function TForm23.calcHours( x : Boolean): Real;
var h1, h , m1, m, s,s1, ms, ms1 : word;
    hours : real;
begin

if x then
  begin
    DecodeTime(ADOTable2['ClockInTime'] ,h , m, s, ms  );
    DecodeTime(ADOTable2['ClockOutTime'] ,h1 , m1, s1, ms1  );
  end
else
  begin
    DecodeTime(ADOTable1['ClockInTime'] ,h , m, s, ms  );
    DecodeTime(ADOTable1['ClockOutTime'] ,h1 , m1, s1, ms1  );
  end;

if h1 = h then
  begin
    hours := (m1 - m)/60;
  end
else
  begin
    hours := (h1-h-1) + ((m1 - m + 60)/60)
  end;

Result := hours;
end;

function TForm23.calcTotalHours: Real;
var hours : real;
begin
ADOTable2.First;
hours := 0;

while not ADOTable2.Eof do
  begin
    hours := hours + calcHours(True);
    ADOTable2.Next;
  end;
Result := hours;
end;

procedure TForm23.dispAll;
begin
ADOTable1.Close;
ADOTable1.TableName := 'tblAttendance';
ADOTable1.Open;

ADOTable1.Refresh;
ADOTable1.Filtered := False;
ADOTable1.filter := 'PAID = FALSE AND ClockOutTime <> Null';
ADOTable1.Filtered := True;
end;

procedure TForm23.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
  CanClose := faLse;
  Unit17.form15.show;
  self.Hide;
end;

procedure TForm23.FormCreate(Sender: TObject);
begin
  Position := poScreenCenter;
  updateForm;
end;

procedure TForm23.FormShow(Sender: TObject);
begin
  updateForm;
end;

procedure TForm23.Image1Click(Sender: TObject);
begin
  Unit17.form15.show;
  self.Hide;
end;

procedure TForm23.payAll;
var i : integer;
begin
ADOTable2.First;
while (ADOTable2.RecordCount>0) and (ADOTable2.Filtered) do
  begin
    i := ADOTable2['RecordNo'];

    if ADOTable2.RecordCount = 1 then
      begin
        ADOTable2.Filtered := False;
        ADOTable2.Locate('RecordNo', i, []);
      end
    else ADOTable2.First;

    ADOTable2.Edit;
    ADOTable2['Paid'] := True;
    ADOTable2.Post;


  end;
  
ADOTable2.Close;

end;

procedure TForm23.updateForm;
var
  RecordNo, EmployeeID, DateOfDay, ClockInTime, ClockOutTime: String;
begin
  dispAll;
  DBGrid1.Columns[1].Width := 100;
  if ADOTable1.RecordCount= 0 then
    begin
    Button1.Enabled := False;
    Button1.ShowHint := True;
    Label1.Caption := 'You have made all payments already';
    end
  else
    begin
    Button1.Enabled := True;
    Button1.ShowHint := False;
    Label1.Caption := 'You have not made '+ IntToStr(ADOTable1.RecordCount)+' payments as yet';
    end;

    ADOQuery2.Close;
    ADOQuery2.SQL.Text := 'SELECT SaleIndex, transactionDate, totalAmount FROM tblSales'+
    ' WHERE TaxPaidFor = False';
    ADOQuery2.Open;

  if ADOQuery2.RecordCount= 0 then
    begin
    Button2.Enabled := False;
    Button2.ShowHint := True;
    Button3.Enabled := False;
    Button3.ShowHint := True;
    Label3.Caption := 'You have already made all Tax payments.';
    end
  else
    begin
    Button2.Enabled := True;
    Button2.ShowHint := False;
    Button3.Enabled := True;
    Button3.ShowHint := False;
    Label3.Caption := 'You have not made '+ IntToStr(ADOQuery2.RecordCount)+' Tax payments as yet';
    end;



end;

end.
