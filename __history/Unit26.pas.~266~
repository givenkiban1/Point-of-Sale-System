unit Unit26;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Grids, DBGrids, ADODB, DB, pngimage, ExtCtrls, dbConn_u, UserAcc,
  jpeg;

type
  TForm26 = class(TForm)
    DBGrid1: TDBGrid;
    Button2: TButton;
    Button3: TButton;
    Panel1: TPanel;
    Image2: TImage;
    Button4: TButton;
    Button5: TButton;
    Button6: TButton;
    ADOQuery1: TADOQuery;
    Button7: TButton;
    Button8: TButton;
    DataSource1: TDataSource;
    Label4: TLabel;
    Image3: TImage;
    Image1: TImage;
    qryBehindScenes: TADOQuery;
    tblGift: TADOTable;
    ADOQuery2: TADOQuery;
    ADOQuery3: TADOQuery;
    Panel2: TPanel;
    Image4: TImage;
    Label1: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Button1: TButton;
    procedure Button8Click(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure Image2Click(Sender: TObject);
    procedure FormCanResize(Sender: TObject; var NewWidth, NewHeight: Integer;
      var Resize: Boolean);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure FormCreate(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure DBGrid1CellClick(Column: TColumn);
    procedure Button7Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure DBGrid1ColEnter(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    Account : TAccount;
  end;

var
  Form26: TForm26;

implementation

uses Unit17;

{$R *.dfm}

procedure TForm26.Button1Click(Sender: TObject);
var heading, msg: string;
begin
//
try
  heading := InputBox('','Enter Message of Notification','');
  if heading<>'' then
    begin
      ADOQuery3.Close;
      ADOQuery3.SQL.Text := 'INSERT into tblNotifications()';
      ADOQuery3.ExecSQL;
    end;
except on E: Exception do
  begin
    ShowMessage('Error! Could not post message to customers.');
    exit;
  end;
end;
end;

procedure TForm26.Button2Click(Sender: TObject);
begin
//
ADOQuery1.Close;
ADOQuery1.SQL.Text := 'SELECT CustomerID, DateOfTrans,LoyaltyPoints'+
' FROM tblLoyaltyPoints Where TYPE = "PURCHASE" ORDER BY LoyaltyPoints DESC ';
ADOQuery1.open;
DBGrid1.Columns[0].Width := 100;
DBGrid1.Columns[1].Width := 100;
DBGrid1.Columns[2].Width := 100;
end;

procedure TForm26.Button3Click(Sender: TObject);
begin
//
ADOQuery1.Close;
ADOQuery1.SQL.Text := 'SELECT Count(CustomerID) AS [No of Deposits],CustomerID from tblLoyaltyPoints'+
' Where Type = "DEPOSIT" GROUP by CustomerID ORDER BY Count(CustomerID) DESC';
ADOQuery1.Open;
DBGrid1.Columns[0].Width := 100;
DBGrid1.Columns[1].Width := 200;

end;

procedure TForm26.Button4Click(Sender: TObject);
var x : Real;
    xx, numRec : integer;
    y ,msg: string;
begin
//
y := ADOQuery1['CustomerID'];
try
x := StrToFloat(inputBox('GIFT','Enter Amount, in Points, to Gift Customer #'+
   y,''));
except
  ShowMessage('You have entered an invalid value.');
  exit;
end;

xx := MessageDlg('Are you sure that you wish to Gift Customer #'+y +
' With '+ FloatToStr(x)+ ' Points.' ,mtConfirmation,[mbYes,mbNo],0);

if xx=6 then
  begin

    qryBehindScenes.Close;
    qryBehindScenes.SQL.Text := 'INSERT INTO tblLoyaltyPoints(CUSTOMERID, LOYALTYPOINTS, TYPE)'+
    ' VALUES('+QuotedStr(y)+','+ FloatToStr(x) +' , '+ QuotedStr('BONUS') +')';

    msg := 'HELLOW, YOU HAVE BEEN GIFTED WITH '+ FloatToStr(x)+ ' Points. Thanks for being a Loyal Customer.';

    if qryBehindScenes.ExecSQL>0 then
      begin

        tblGift.Close;
        tblGift.TableName := 'tblNotifications';
        tblGift.Open;

        numRec := tblGift.RecordCount; 
        
        tblGift.Insert;
        tblGift['BY'] := Account.getEmployeeID;
        tblGift['TOWHOM'] := y; 
        tblGift['MESSAGE'] := msg;
        tblGift.Insert;

         if numRec = tblGift.RecordCount then
          begin
            MessageDlg('An error occured while trying to gift A customer. try again later.',
            mtError, [mbOk],0);
            ADOQuery2.Connection.RollbackTrans;
          end
        else//if records have been inserted in both tblNotification and tblLoyalty points
          begin
            //then update the customers loyalty points
            tblGift.Close;
            tblGift.TableName := 'tblCustomers';
            tblGift.Open;

            tblGift.Locate('CustomerID', y, []);

            tblGift.Edit;
            tblGift['LoyaltyPoints'] := tblGift['LoyaltyPoints'] + x;
            tblGift.Post;

            ShowMessage('User has been successfully gifted.');
            Button8Click(self);
          end;
      end;

    
  end
else
  begin

  end;
end;

procedure TForm26.Button5Click(Sender: TObject);
var sID , stat: string;
begin
sID := ADOQuery1['CustomerId'];
tblGift.Close;
tblGift.TableName := 'tblCustomers';
tblGift.Open;

tblGift.Locate('CustomerID', sID, []);
tblGift.Edit;
if tblGift['ACCOUNT_STATUS'] then
  stat := 'Blocked'
else stat := 'Unblocked';

tblGift['ACCOUNT_STATUS'] := Not(tblGift['ACCOUNT_STATUS']);
tblGift.Post;
ShowMessage('Account of '+sID+ ' has been ' + stat);
Button8Click(Self);
end;

procedure TForm26.Button6Click(Sender: TObject);
begin
ADOQuery1.Close;
ADOQuery1.SQL.Text := 'SELECT CustomerID, DateOfTrans, LoyaltyPoints from tblLoyaltyPoints'+
' Where TYPE = "BONUS" ORDER BY DateOfTrans DESC ';
ADOQuery1.Open;

DBGrid1.Columns[0].Width := 70;
DBGrid1.Columns[1].Width := 100;
DBGrid1.Columns[2].Width := 100;
end;

procedure TForm26.Button7Click(Sender: TObject);
begin
ADOQuery1.Close;
ADOQuery1.SQL.Text := 'SELECT CustomerID, firstName, Surname, IIF(DOB = Date(), "Today", DOB) AS BirthDate '+
' From tblCustomers ORDER by IIF(DOB = Date(), "Today", DOB)';
ADOQuery1.Open;

DBGrid1.Columns[0].Width := 70;
DBGrid1.Columns[1].Width := 100;
DBGrid1.Columns[2].Width := 100;
DBGrid1.Columns[3].Width := 150;



end;

procedure TForm26.Button8Click(Sender: TObject);
begin
//
DataSource1.DataSet := ADOQuery1;

ADOQuery1.Close;
ADOQuery1.SQL.Text := 'SELECT CustomerID, firstName, Surname, Gender, Email, ACCOUNT_STATUS from tblCustomers';
ADOQuery1.Open;

DBGrid1.Columns[0].Width := 70;
DBGrid1.Columns[1].Width := 100;
DBGrid1.Columns[2].Width := 100;
DBGrid1.Columns[3].Width := 50;
DBGrid1.Columns[4].Width := 150;
end;

procedure TForm26.DBGrid1CellClick(Column: TColumn);
begin

ADOQuery2.Close;
ADOQuery2.SQL.Text := 'SELECT * FROM tblCustomers Where CustomerID = '+ 
  QuotedStr( ADOQuery1['CustomerID'] );
ADOQuery2.Open;

Image4.Picture.LoadFromFile(ExtractFilePath(ParamStr(0)) + ADOQuery2['ProfilePic']);


Label1.Caption := 'Name : '+ ADOQuery2['firstName'];
Label5.Caption := 'Surname : '+ ADOQuery2['Surname'];

//Last active
ADOQuery2.Close;
ADOQuery2.SQL.Text := 'SELECT * FROM tblLoyaltyPoints WHERE TYPE <> "BONUS" AND CustomerID = '+
QuotedStr(ADOQuery1['CustomerID'])+' ORDER by DateOfTrans DESC';
ADOQuery2.Open;

if (ADOQuery2.RecordCount >0) then
  begin
    ADOQuery2.First;
    Label6.Caption := 'Last Active : '+ DateToStr(ADOQuery2['DateOfTrans']);
  
  end
else
  begin
    Label6.Caption := 'Last Active : Never!';
  end;
ADOQuery2.Close;
end;

procedure TForm26.DBGrid1ColEnter(Sender: TObject);
begin
DBGrid1CellClick(nil);
end;

procedure TForm26.FormCanResize(Sender: TObject; var NewWidth,
  NewHeight: Integer; var Resize: Boolean);
begin
Resize := False;
end;

procedure TForm26.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
CanClose := False;
Image2Click(Self);
end;

procedure TForm26.FormCreate(Sender: TObject);
begin
Position := poDesktopCenter;
Button8Click(Self);
end;

procedure TForm26.FormShow(Sender: TObject);
begin
Button8Click(Self);
end;

procedure TForm26.Image2Click(Sender: TObject);
begin
self.Hide;
unit17.form15.show;
end;

end.
